<?
		// This class lib is a collection of the functions used in 
		// the Miles4Sale website, and it has been assembled/coded by
		// Jason Hudgins <jason@netfist.com>

require_once('class_mail_mbss.php');

class Miles4Sale {

		// the constructor
	function Miles4Sale ($SQL) {
			// store our SQL object
		$this->SQL = $SQL;
	}

		// this object returns a row from the airlines table
	function GetAirlineObj($ID) {
			// convert to an int
		$ID = intval($ID);

			// sql query to be used
		$sql = "SELECT * FROM Airlines WHERE ID='$ID' LIMIT 1";
			// exec query
		$recSet = $this->SQL->Query($sql);
			// check for valid record and return it if we have one
		if($recSet[0]) {
			return $recSet[0];
		}
			// otherwise we return false.
  	return false;
	}

		// this method returns a "basket" object
	function GetBasketObj($ID) {
			// convert to an int
  	$ID = intval($ID);
			// query to snag the basket row by ID
  	$sql = "SELECT * FROM Baskets WHERE ID='$ID' LIMIT 1";
			// exec the query
		$recSet = $this->SQL->Query($sql);
			// if we have the recset, return the record
		if($recSet[0]) { 
			return $recSet[0];
		}
			// or we return false
		return false;
	}

		// this method returns an html select list of the available 
		// "gift baskets"
	function GetBasketsSel($BasketID = 0, $SelectName='BasketID', $Extra='',
		$Blank = false) {

			// sql query to pull out gift basket quantity/prices
		$sql = "
			SELECT
      	CONCAT(DisplayName,' ($',Price,')') AS Name,
      	ID
    	FROM
      	Baskets
    	WHERE
      	Enabled = 1 and
				Version = 1
      ORDER BY Quantity ASC
		";
			// do the query
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			$output .= '<option value="' . $rec['ID'] . '">' . $rec['Name'] .
				"</option>\n";
		}
		$output .= "</SELECT>\n";

		return $output;
	}

		// this method takes a cart data struct and returns a list of 
		// things (number of items, sub-total, total )
	function GetCartInfo(&$Cart, $feeFlag = 1) {
		$GrandSubTotal = 0.00;
		$GrandTotal = 0.00;
		$Count = 0;

		if (count($Cart) < 1) {
			return array(0,0,0);
		}

			// uh...
		reset($Cart);

			// uhhh..
		while ( list($index, $ItemObj) = each($Cart) ) {
			$Count += 1;

			$DeliveryObj = $this->GetDeliveryObj($ItemObj['DeliveryType']);
			$BasketObj = $this->GetBasketObj($ItemObj['BasketID']);
			$AirlineObj = $this->GetAirlineObj($ItemObj['AirlineID']);

			$Cost = sprintf("%01.2f",$BasketObj['Price']);
			if($feeFlag) {
				$Fees = sprintf("%01.2f", (0.075 * $BasketObj['Price']) );
			}
			else {
				$Fees = 0;
			}
			$Shipping = sprintf("%01.2f", $DeliveryObj['Price'] );

			$RowSubTotal =  sprintf("%01.2f", ($Cost + $Fees) );
			$RowTotal =  sprintf("%01.2f", ($RowSubTotal + $Shipping) );

			$GrandSubTotal += $RowSubTotal;
			$GrandTotal += $RowTotal;
		}
		reset($Cart);
		$GrandSubTotal = sprintf("%01.2f", $GrandSubTotal);
		$GrandTotal = sprintf("%01.2f", $GrandTotal);

		return array($Count,$GrandSubTotal,$GrandTotal);
	}

		// method returns a select list containing the countrys
	function GetCountriesSel($CountryCode='US', $SelectName='Country', 
		$Extra='', $Blank=false) {

			// exec sql query	
		$sql = "
			SELECT
				Name,
				Code
			FROM 
				Countries
			WHERE
				Enabled=1
		";
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			if($rec['Code'] == 'US') {
				$output .= '<option value="' . $rec['Code'] . '" selected>' . 
					$rec['Name'] .  "</option>\n";
			}
			else {
				$output .= '<option value="' . $rec['Code'] . '">' . $rec['Name'] .
					"</option>\n";
			}
		}
		$output .= "</SELECT>\n";

			// return the output
		return $output;
  }

		// this method returns a particular row from the delivery types table
	function GetDeliveryObj($ID) {
			// make sure we have an integer
		$ID = intval($ID);
			// form our sql query
		$sql = "SELECT * FROM DeliveryTypes WHERE ID='$ID' LIMIT 1 ";
			// do the query	
		$recSet = $this->SQL->Query($sql);

			// the the recset exists, then return the record (a hash array)
		if($recSet[0]) {
			return $recSet[0];
		}

			// other wise just return false
		return false;
	}

		// this method returns an html select list of the available 
		// "discounted gift baskets"
	function GetDiscountBasketsSel($BasketID = 0, $SelectName='BasketID', 
		$Extra='', $Blank = false) {

			// sql query to pull out gift basket quantity/prices
		$sql = "
			SELECT
      	CONCAT(DisplayName,' ($',Price,')') AS Name,
      	ID
    	FROM
      	Baskets
    	WHERE
      	Enabled = 1 and
				Version = 2
      ORDER BY Quantity ASC
		";
			// do the query
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			$output .= '<option value="' . $rec['ID'] . '">' . $rec['Name'] .
				"</option>\n";
		}
		$output .= "</SELECT>\n";

		return $output;
	}

		// this method returns an html select list of the available
		// airlines frequent flier programs
		// NOTE - Sort Order for this list is determined by The DisplayOrder Field
		// in the Airlines Table. If you add a new record to Airlines, it will not
		// have the DisplayOrder Field Set (it will be set to NULL) so the
		// new item will show up at the top of the list. To fix this, update
		// the DisplayOrder in the database.
	function GetAirlinesSel($AirlineID=0, $SelectName='AirlineID', $Extra='',
		$Blank=false) {

			// build the query
		$sql = "
			SELECT 
				FFProgram,
				ID
			FROM
				Airlines 
			WHERE
				Enabled=1
			ORDER BY DisplayOrder
		";

			// execute it
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			$output .= '<option value="' . $rec['ID'] . '">' . $rec['FFProgram'] .
				"</option>\n";
		}
		$output .= "</SELECT>\n";

		return $output;
	}

		// this method creates an html select list of pay types from the dbase
	function GetPaymentTypesSel($TypeID='0', $SelectName='PaymentType',
		$Extra='', $Blank=false) {

			// exec the query to pull thisstuff rom the dbase
		$sql = "
			SELECT
				Name,
				Abbrev
			FROM
				PaymentTypes
			WHERE
				Enabled=1
		";
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			$output .= '<option value="' . $rec['Abbrev'] . '">' . 
				$rec['Name'] .  "</option>\n";
		}
		$output .= "</SELECT>\n";

		return $output;
	}
		
		// please see comments for GetAirlinesSel before modifying thise
		// code, other than that, the only difference between the two
		// methods is that this ONLY includes delta
	function GetSaleAirlinesSel($AirlineID=0, $SelectName='AirlineID', $Extra='',
		$Blank=false) {

			// build the query
		$sql = "
			SELECT 
				FFProgram,
				ID
			FROM
				Airlines 
			WHERE
				Enabled = 1 and
				ID = 1
			ORDER BY DisplayOrder
		";

			// execute it
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			$output .= '<option value="' . $rec['ID'] . '">' . $rec['FFProgram'] .
				"</option>\n";
		}
		$output .= "</SELECT>\n";

		return $output;
	}

		// this method returns an html select list of the available 
		// "gift baskets"
	function GetSaleBasketsSel($BasketID = 0, $SelectName='BasketID', $Extra='',
		$Blank = false) {

			// sql query to pull out gift basket quantity/prices
		$sql = "
			SELECT
      	CONCAT(DisplayName,' ($',Price,')') AS Name,
      	ID
    	FROM
      	Baskets
    	WHERE
      	Enabled = 1 and
				Version = 3 
      ORDER BY Quantity ASC
		";
			// do the query
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			$output .= '<option value="' . $rec['ID'] . '">' . $rec['Name'] .
				"</option>\n";
		}
		$output .= "</SELECT>\n";

		return $output;
	}

		// this method generates a select list of states
	function GetStatesSel($StateCode = '0', $SelectName = 'State', $Extra = '', 
		$Blank = false) {

		$sql = "
			SELECT
				ID,
				Name,
				Code
			FROM 
				States
			WHERE
				Enabled = 1
			";

			// pop the query
		$recSet = $this->SQL->Query($sql);

			// assemble the output
		$output = "<SELECT name=\"$SelectName\">\n";
	 	foreach ($recSet as $rec ) {
			if($rec['ID'] != $StateCode) {
				$output .= '<option value="' . $rec['Code'] . '">' . $rec['Name'] .
					"</option>\n";
			}
			else {
				$output .= '<option value="' . $rec['Code'] . '" selected>' . 
					$rec['Name'] .  "</option>\n";
			}
		}
		$output .= "</SELECT>\n";

			// return the output
		return $output;
	}

		// this method is for mailing out a receipt to the customer
		// after the order is filled..
	function MailReceipt($name, $invoice, $card, &$cart, $Recip='', $feeFlag = 1) {

			// rewind the cart
		reset($cart);
			// init a new mbssmail object
		$mailer = new mbssmail();
			// init some stuff
		$mailer->ClearAllRecipients();
		$mailer->WordWrap = false;

			// hrmm we iterate over the items 
		while ( list($index,$Item) = each($cart) ) {
			$AllEmails[$Item['Sender_Email']] = $Item['Sender_Email'];
		}
			// add addresses to the mailer object
		while ( list($key,$val) = each($AllEmails) ) {
			$mailer->AddAddress($key);
		}
		if ($Recip) {
			$mailer->AddAddress($Recip);
		}
		$mailer->AddAddress("orders@miles4sale.com");
		$mailer->From		 = "service@Miles4Sale.com";
		$mailer->FromName	 = "Miles4Sale.com";
		$mailer->Subject	 = "Thank you for your purchase!";
		$mailer->Body		 = "Dear $name,\n\n";
		$mailer->Body .= "Thank you for shopping at Miles4Sale.com. " .
			"We have received your order \n";
		$mailer->Body .= "and this email is your confirmation receipt. \n\n";

		$mailer->Body .=	"YOUR ORDER DETAILS \n";
		$mailer->Body .=	"----------------------------------";
		$mailer->Body .=	"---------------------------------- \n";

		$cartindex = 1;
		$GrandSubTotal = 0;
		$GrandTotal = 0;
		$fmt = "%-9s%-s\n";

		foreach ($cart as $ItemObj) {
			$DeliveryObj = $this->GetDeliveryObj($ItemObj["DeliveryType"]);
			$BasketObj = $this->GetBasketObj($ItemObj["BasketID"]);
			$AirlineObj = $this->GetAirlineObj($ItemObj["AirlineID"]);
	
			$SenderName = stripslashes($ItemObj['Sender_First'] . ' ' . 
				$ItemObj['Sender_Last']);
			$SenderEmail = $ItemObj['Sender_Email'];
			$RecipName = stripslashes($ItemObj['Recip_First'] . ' ' . 
				$ItemObj['Recip_Last']);
			$RecipEmail = $ItemObj['Recip_Email'];

			$Cost = sprintf("%01.2f",$BasketObj['Price']);
			if($feeFlag) {
				$Fees = sprintf("%01.2f", (0.075 * $BasketObj['Price']) );
			}
			else {
				$Fees = 0;
			}
			$Shipping = sprintf("%01.2f", $DeliveryObj['Price'] );
			$ShippingName = $DeliveryObj['Name'];

			$RowSubTotal =  sprintf("%01.2f", ($Cost + $Fees) );
			$RowTotal =  sprintf("%01.2f", ($RowSubTotal + $Shipping) );

			$GrandSubTotal += $RowSubTotal;
			$GrandTotal += $RowTotal;
			$fmt = "%-9s%-s\n";

			if ($ItemObj['Type'] == 1) {
				$Description  = sprintf($fmt,"Item $cartindex",
					"Miles4Sale.com Order ID #" . $ItemObj["OrderID"]);
				$Description .= sprintf($fmt,'',
						"Quantity: " . $BasketObj["DisplayName"] . " Points/Miles ");
				$Description .= sprintf($fmt,'',
						"To be credited to: " . $AirlineObj["Name"] . " account #"
						. $ItemObj["FFNumber"]);
				$Description .= sprintf($fmt,'',
						$AirlineObj["Name"] . " Account Holder: $RecipName");
				$Description .= sprintf($fmt,'',
					"Base Price: $Cost + $Fees processing fees");
				$Description .= sprintf($fmt,'',
					"Item Total: $" . $RowTotal);
			}
			elseif ($ItemObj['GiftMethod'] == 1) {
				$Description  = sprintf($fmt,"Item $cartindex",
					"Miles4Sale.com Order ID #" . $ItemObj["OrderID"]);
				$Description .= sprintf($fmt,'',
					"Quantity: " . $BasketObj["DisplayName"] . " Gift Points/Miles ");
				$Description .= sprintf($fmt,'',
					"To be credited to: " . $AirlineObj["Name"] . " account #"
					. $ItemObj["FFNumber"]);
				$Description .= sprintf($fmt,'',
					$AirlineObj["Name"] . " Account Holder: $RecipName");
				$Description .= sprintf($fmt,'',
					"Gift Notification Sent to: " . $ItemObj["Recip_Email"]);
				$Description .= sprintf($fmt,'',
					"Base Price: $Cost + $Fees processing fees");
				$Description .= sprintf($fmt,'',
					"Item Total: $" . $RowTotal);
			}
			else if ($ItemObj['GiftMethod'] == 2) {
				$Description  = sprintf($fmt,"Item $cartindex",
					"Miles4Sale.com Order ID #" . $ItemObj["OrderID"]);
				$Description .= sprintf($fmt,'',
					"Quantity: " . $BasketObj["DisplayName"] . " Gift Points/Miles ");
				$Description .= sprintf($fmt,'',
					"To be later redeemed by recipient. ");

				if ($ItemObj["DeliveryType"] == 1) {
					$Description .= sprintf($fmt,'','Gift Certificate Sent to:');
					$Description .= sprintf($fmt,'','  ' . $ItemObj["Recip_Email"]);
				}
				else {
					$Description .= sprintf($fmt,'','Gift Certificate will be Sent to:');
					$Description .= sprintf($fmt,'','  ' . $ItemObj["Recip_Address1"]);
					if (strlen($ItemObj["Recip_Address2"]) > 3)
						$Description .= sprintf($fmt,'','  ' . $ItemObj["Recip_Address2"]);
					$Description .= sprintf($fmt,'','  ' 
						. $ItemObj["Recip_City"] . ", "
						. $ItemObj["Recip_State"] . "  "
						. $ItemObj["Recip_Zip"]);
				}
				$Description .= sprintf($fmt,'',
						"Base Price: $Cost + $Fees processing fees");
				$Description .= sprintf($fmt,'',
					"Shipping: " . $Shipping . " ($ShippingName)");
				$Description .= sprintf($fmt,'',
					"Item Total: $" . $RowTotal);
			}
			else {
				next;
			}

			$mailer->Body .= $Description;
			$mailer->Body .= "\n";
			++$cartindex;
		}

		reset($cart);
		$GrandTotal = sprintf("%01.2f",$GrandTotal);

		$mailer->Body .=	"\n----------------------------------";
		$mailer->Body .=	"---------------------------------- \n";
		$mailer->Body .=	sprintf($fmt,'',
			"Grand Total: $" . $GrandTotal);
		$mailer->Body .=	sprintf($fmt,'',
			"Paid Via: $card");
		$mailer->Body .=        sprintf($fmt,'',
			"Invoice Code: $invoice");

		$mailer->Body .= "\n\n";
		$mailer->Body .= "PLEASE NOTE: If you purchased Points/Miles for " .
			"yourself or as a gift,\n";
		$mailer->Body .= "and the frequent flyer membership information is " .
			"listed above, there\n";
		$mailer->Body .= "is no need to redeem the gift.  We have the " .
			"information on file and\n"; 
		$mailer->Body .= "it will be delivered to the airline you chose " .
			"automatically. \n\n";
		$mailer->Body .= "Those gifts which are listed as \"To be later " .
			"redeemed\" will expire\n";
		$mailer->Body .= "if not redeemed with Miles4Sale.com within 90 days " .
			"of the original\n";
		$mailer->Body .= "date of gift certificate purchase.  Once the miles " .
			"have been redeemed\n";
		$mailer->Body .= "with Miles4Sale.com and deposited into the account " .
			"of your choice,\n";
		$mailer->Body .= "individual airline expiration policies will apply " .
			"on the use of those\n";
		$mailer->Body .= "miles. \n\n";

		$mailer->Body .= "If you have any questions, please call our toll free " .
			"customer service\n";
		$mailer->Body .= "line at (866) 630-8717 or use our online feedback " .
			"form for assistance.\n\n";

		$mailer->Send();
	}

		// this method generates some kind of invoice code
	function MakeCode($length) {
		mt_srand((double)microtime() * 1000000);

		$possible = '19283047650594278361';
		$str = "";
		while (strlen($str) < $length) {
			$str .= substr ($possible, mt_rand(0, strlen($possible) -1), 1);
		}
		return ($str);
	}

	// end of Miles4Sale Class
}

?>
